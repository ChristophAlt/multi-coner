# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python run.py -m hparams_search=mnist_optuna experiment=example_simple
# python run.py -m hparams_search=mnist_optuna experiment=example_simple hydra.sweeper.n_trials=30
# python run.py -m hparams_search=mnist_optuna experiment=example_simple logger=wandb

defaults:
    - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
optimized_metric: "val/f1"

hydra:
    # here we define Optuna hyperparameter search
    # it optimizes for value returned from function with @hydra.main decorator
    # learn more here: https://hydra.cc/docs/next/plugins/optuna_sweeper
    sweeper:
        _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
        storage: null
        study_name: null
        n_jobs: 1

        # 'minimize' or 'maximize' the objective
        direction: maximize

        # number of experiments that will be executed
        n_trials: 30

        # choose Optuna hyperparameter sampler
        # learn more here: https://optuna.readthedocs.io/en/stable/reference/samplers.html
        sampler:
            _target_: optuna.samplers.TPESampler
            seed: 12345
            consider_prior: true
            prior_weight: 1.0
            consider_magic_clip: true
            consider_endpoints: false
            n_startup_trials: 10
            n_ei_candidates: 24
            multivariate: false
            warn_independent_sampling: true

        # define range of hyperparameters
        search_space:
            datamodule.batch_size:
                type: categorical
                choices: [16, 32]
            model.learning_rate:
                type: float
                low: 1e-5
                high: 1e-4
            model.task_learning_rate:
                type: float
                low: 1e-5
                high: 5e-4
            model.augment_input:
                type: categorical
                choices: [False, True]
            model.augment_input_prob:
                type: float
                low: 0.1
                high: 0.5
            model.mlp_hidden_dim:
                type: categorical
                choices: [128, 256, 512, 1024]
            model.mlp_num_layers:
                type: categorical
                choices: [1, 2]
